"use strict";var app=angular.module("myApp",["mgcrea.ngStrap","ui.router"]).run(["$anchorScroll",function(o){o.yOffset=50}]),app=angular.module("myApp");app.controller("aboutCtrl",["$scope",function(o){console.log("aboutCtrl!")}]);var app=angular.module("myApp");app.controller("crudCtrl",["$scope","Crud",function(o,e){o.cruds=[],e.getAll().then(function(e){o.cruds=e.data,console.log("$scope.cruds:",o.cruds)})["catch"](function(o){console.log("err: ",o)}),o.addCrud=function(){e.addCrud(o.newItem).then(function(e){o.cruds.push(e),o.newItem={}})["catch"](function(o){console.log("error: ",o)})},o.deleteCrud=function(t,n){console.log("crud:",n),e.deleteCrud(n._id).then(function(e){o.cruds.splice(t,1)})["catch"](function(o){console.log("error: ",o)})},o.showUpdateForm=function(e,t){console.log("index: ",e),console.log("crud: ",t),o.showUpdate=!0,o.updateItem=t,o.updateIndex=e},o.updateCrud=function(){o.showUpdate=!1,e.updateCrud(o.updateItem._id,o.updateItem).then(function(e){console.log("update apt:",o.updateItem._id," , ",o.updateItem)})["catch"](function(o){console.log("error: ",o)})}}]);var app=angular.module("myApp");app.controller("homeCtrl",["$scope",function(o){console.log("homeCtrl!")}]);var app=angular.module("myApp");app.controller("mainCtrl",["$scope","$location","$anchorScroll",function(o,e,t){o.gotoAnchor=function(o){var n="anchor"+o;e.hash()!==n?e.hash("anchor"+o):t()}}]),app.directive("myNavscroll",["$window",function(o){return function(e,t,n){angular.element(o).bind("scroll",function(){e.scrollPosition||(e.scrollPosition=0),this.pageYOffset>e.scrollPosition?e.boolChangeClass=!0:e.boolChangeClass=!1,e.scrollPosition=this.pageYOffset,e.$apply()})}}]);var app=angular.module("myApp");app.controller("projectsCtrl",["$scope",function(o){console.log("projectsCtrl!")}]);var app=angular.module("myApp");app.controller("travelsCtrl",["$scope",function(o){console.log("travelsCtrl!")}]);var app=angular.module("myApp");app.service("Crud",["$http","$q",function(o,e){this.getAll=function(){return o.get("/api/cruds")},this.getById=function(e){return o.get("/api/cruds/"+e)},this.addCrud=function(t){return o.post("/api/cruds",t).then(function(o){return e.resolve(o.data)})["catch"](function(o){console.log("err:",o)})},this.deleteCrud=function(t){return o["delete"]("/api/cruds/"+t).then(function(){return e.resolve()})["catch"](function(o){console.log("err:",o)})},this.updateCrud=function(t,n){return o.put("/api/cruds/"+t,n).then(function(o){return e.resolve(n)})["catch"](function(o){console.log("err:",o)})}}]);var app=angular.module("myApp");app.service("User",["$http","$q",function(o,e){this.profile=function(){return o.get("/api/users/profile").then(function(o){return e.resolve(o.data)})},this.getProfile=function(t){return o.get("/api/users/profile/"+t).then(function(o){return e.resolve(o.data)})["catch"](function(o){console.log("err:",o)})},this.getAll=function(){return o.get("/api/users")},this.updateProfile=function(t,n){return console.log("here"),console.log(t," ",n),o.put("/api/users/profile/"+t,n).then(function(o){return console.log("res.data",o.data),console.log("profileObj",n),e.resolve()})["catch"](function(o){console.log("err:",o)})},this.deleteAccount=function(t){return o["delete"]("/api/users/profile/"+t).then(function(o){return e.resolve()})["catch"](function(o){console.log("err:",o)})},this.addWallPostToUser=function(t,n){return console.log("userId: ",t," postId: ",n),o.put("/api/users/profile/"+t+"/addWallPost/"+n).then(function(o){return e.resolve(o.data)})["catch"](function(o){console.log("err:",o)})}}]);
//# sourceMappingURL=data:application/json;base64,
