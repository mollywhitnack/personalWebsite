"use strict";var app=angular.module("myApp",["mgcrea.ngStrap","ui.router"]);app.config(["$stateProvider","$urlRouterProvider",function(t,e){t.state("home",{url:"/home",templateUrl:"/html/home.html",controller:"homeCtrl"}).state("about",{url:"/about",templateUrl:"html/about.html",controller:"aboutCtrl"}).state("travels",{url:"/travels",templateUrl:"html/travels.html",controller:"travelsCtrl"}).state("projects",{url:"/projects",templateUrl:"html/projects.html",controller:"projectsCtrl"}),e.otherwise("/")}]);var app=angular.module("myApp");app.controller("aboutCtrl",["$scope",function(t){console.log("aboutCtrl!")}]);var app=angular.module("myApp");app.controller("crudCtrl",["$scope","Crud",function(t,e){t.cruds=[],e.getAll().then(function(e){t.cruds=e.data,console.log("$scope.cruds:",t.cruds)})["catch"](function(t){console.log("err: ",t)}),t.addCrud=function(){e.addCrud(t.newItem).then(function(e){t.cruds.push(e),t.newItem={}})["catch"](function(t){console.log("error: ",t)})},t.deleteCrud=function(o,r){console.log("crud:",r),e.deleteCrud(r._id).then(function(e){t.cruds.splice(o,1)})["catch"](function(t){console.log("error: ",t)})},t.showUpdateForm=function(e,o){console.log("index: ",e),console.log("crud: ",o),t.showUpdate=!0,t.updateItem=o,t.updateIndex=e},t.updateCrud=function(){t.showUpdate=!1,e.updateCrud(t.updateItem._id,t.updateItem).then(function(e){console.log("update apt:",t.updateItem._id," , ",t.updateItem)})["catch"](function(t){console.log("error: ",t)})}}]);var app=angular.module("myApp");app.controller("homeCtrl",["$scope",function(t){console.log("homeCtrl!")}]);var app=angular.module("myApp");app.controller("mainCtrl",["$scope",function(t){console.log("mainCtrl!")}]);var app=angular.module("myApp");app.controller("projectsCtrl",["$scope",function(t){console.log("projectsCtrl!")}]);var app=angular.module("myApp");app.controller("travelsCtrl",["$scope",function(t){console.log("travelsCtrl!")}]);var app=angular.module("myApp");app.service("Crud",["$http","$q",function(t,e){this.getAll=function(){return t.get("/api/cruds")},this.getById=function(e){return t.get("/api/cruds/"+e)},this.addCrud=function(o){return t.post("/api/cruds",o).then(function(t){return e.resolve(t.data)})["catch"](function(t){console.log("err:",t)})},this.deleteCrud=function(o){return t["delete"]("/api/cruds/"+o).then(function(){return e.resolve()})["catch"](function(t){console.log("err:",t)})},this.updateCrud=function(o,r){return t.put("/api/cruds/"+o,r).then(function(t){return e.resolve(r)})["catch"](function(t){console.log("err:",t)})}}]);var app=angular.module("myApp");app.service("User",["$http","$q",function(t,e){this.profile=function(){return t.get("/api/users/profile").then(function(t){return e.resolve(t.data)})},this.getProfile=function(o){return t.get("/api/users/profile/"+o).then(function(t){return e.resolve(t.data)})["catch"](function(t){console.log("err:",t)})},this.getAll=function(){return t.get("/api/users")},this.updateProfile=function(o,r){return console.log("here"),console.log(o," ",r),t.put("/api/users/profile/"+o,r).then(function(t){return console.log("res.data",t.data),console.log("profileObj",r),e.resolve()})["catch"](function(t){console.log("err:",t)})},this.deleteAccount=function(o){return t["delete"]("/api/users/profile/"+o).then(function(t){return e.resolve()})["catch"](function(t){console.log("err:",t)})},this.addWallPostToUser=function(o,r){return console.log("userId: ",o," postId: ",r),t.put("/api/users/profile/"+o+"/addWallPost/"+r).then(function(t){return e.resolve(t.data)})["catch"](function(t){console.log("err:",t)})}}]);
//# sourceMappingURL=data:application/json;base64,
